{{#if user}}
    <h3>Bienvenido, 
        <strong>
            {{user.first_name}}
        </strong>
    </h3>
{{else}}
    <p>
        Inicia sesión para poder comprar!
        <a href="/login">Iniciar</a>
    </p>
{{/if}}
<div id="cart" data-cart-id="{{cart._id}}">
    {{#if cart.products.length}}
        <div style="width: 1000px;">
            <div>
                <table>
                    <thead>
                        <tr>
                            <th style="padding-right: 20px;" scope="col">Producto</th>
                            <th style="padding-right: 20px;" scope="col">Descripción</th>
                            <th style="padding-right: 20px;" scope="col">Precio</th>
                            <th style="padding-right: 20px;" scope="col">Cantidad</th>
                            <th style="padding-right: 20px;" scope="col">Stock</th>
                            <th style="padding-right: 20px;" scope="col">Subtotal</th>
                            <th style="padding-right: 20px;" scope="col"></th>
                        </tr>
                    </thead>
                    <div>
                        {{#each cart.products}}
                        <tr data-product-id="{{this.product._id}}">
                            <td style="padding-right: 20px;">{{this.product.name}}</td>
                            <td style="padding-right: 20px;">{{this.product.description}}</td>
                            <td style="padding-right: 20px;">${{this.product.price}}</td>
                            <td style="padding-right: 20px;" class="quantity"><strong>{{this.quantity}}</strong></td>
                            <td style="padding-right: 20px;" class="stock"><strong>{{this.product.stock}}</strong></td>
                            <td>${{calculateSubtotal this.product.price this.quantity}}</td>
                            <td>
                                <button type="button" onclick="removeFromCart('{{this.product._id}}')">Eliminar</button>
                            </td>
                        </tr>
                        {{/each}}
                    </div>
                </table>
            </div>
        </div>
        <div>
            <br>
            <a href="/products">Seguir Comprando...</a><br><br>
            <button onclick="emptyCart()">Vaciar carrito</button><br><br>
            <button id="finalize-purchase">Finalizar Compra</button><br><br>
            <h3>Total: ${{calculateTotal cart.products}}</h3>
        </div>
    {{else}}
        <h2>No tienes productos en tu carrito</h2>
        <br>
        <h5>
            Comprar productos en la <a href="/products">Tienda</a>
        </h5>
    {{/if}}
</div>

<script>
    function getCartId() {
    const cartDiv = document.getElementById('cart')
    return cartDiv.dataset.cartId
    }

    async function removeFromCart(productId) {
    const cartId = getCartId()
    try {
        const swalResponse = await Swal.fire({
            title: '¿Estás seguro?',
            text: '¿Quieres eliminar este producto del carrito?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar',
        })

        if (swalResponse.isConfirmed) {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, { method: 'DELETE' })
            const data = await response.json()
            if (data.status === 'success') {
                await Swal.fire('¡Éxito!', 'Producto eliminado del carrito', 'success')
                window.location.href = `/carts/${cartId}`
            } else {
                await Swal.fire('Error', 'No se pudo eliminar el producto del carrito', 'error')
            }
        }
    } catch (error) {
        console.error('Error al eliminar producto del carrito:', error)
        await Swal.fire('Error', 'Ocurrió un error al eliminar el producto del carrito', 'error')
    }
    }

    async function emptyCart() {
    const cartId = getCartId()
    try {
        const swalResponse = await Swal.fire({
            title: '¿Estás seguro?',
            text: '¿Quieres vaciar completamente el carrito?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, vaciar',
            cancelButtonText: 'Cancelar',
        })

        if (swalResponse.isConfirmed) {
            const response = await fetch(`/api/carts/${cartId}`, { method: 'DELETE' })
            const data = await response.json()
            if (data.status === 'success') {
                await Swal.fire('¡Éxito!', 'Carrito vaciado', 'success')
                window.location.href = `/carts/${cartId}`
            } else {
                await Swal.fire('Error', 'No se pudo vaciar el carrito', 'error')
            }
        }
    } catch (error) {
        console.error('Error al vaciar carrito:', error)
        await Swal.fire('Error', 'Ocurrió un error al vaciar el carrito', 'error')
    }
    }

    document.addEventListener('DOMContentLoaded', () => {
    let quantitiesAdjusted = false

    document.getElementById('finalize-purchase').addEventListener('click', () => {
        const cartId = document.getElementById('cart').dataset.cartId
        const products = document.querySelectorAll('#cart tbody tr')

        const updatedProducts = []
        let adjustmentsMade = false

        products.forEach(product => {
            const productId = product.dataset.productId
            const quantityElement = product.querySelector('.quantity strong')
            const stockElement = product.querySelector('.stock strong')

            const quantity = parseInt(quantityElement.textContent)
            const stock = parseInt(stockElement.textContent)

            if (quantity > stock) {
                quantityElement.textContent = stock
                product.style.backgroundColor = '#E5F876'
                updatedProducts.push({ productId, quantity: stock })
                adjustmentsMade = true
            } else {
                updatedProducts.push({ productId, quantity })
            }
        })

        if (adjustmentsMade) {
            fetch(`/api/carts/${cartId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ products: updatedProducts })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Compra actualizada',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        quantitiesAdjusted = true
                    })
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Ocurrió un error al actualizar el carrito.'
                    })
                }
            })
            .catch(error => {
                console.error('Error al actualizar el carrito:', error)
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Ocurrió un error al actualizar el carrito.'
                })
            })
        } else {
            window.location.href = `/${cartId}/purchase`
        }
    })
    })
</script>
